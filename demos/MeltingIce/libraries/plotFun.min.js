function functionToArray(){let e,n,t,o,a;e=arguments[0],n=arguments[1][0],o=arguments[1][1],a=arguments[1][2],t=[],4==arguments[1].length&&0==isNaN(arguments[1][3])?plotRangeInc=Number(arguments[1][3]):plotRangeInc=Number((arguments[1][2]-arguments[1][1])/100);try{if(2!=arguments.length||"object"!=typeof arguments[1]||arguments[1].length<3||arguments[1].length>4)throw"two input arguments: 1.) a single-variate function and 2.) a 3-dimensional array for the independent variable and its respective plot range."}catch(e){console.log("function toPlot() requires "+e+" e.g. equationToArray(x + 2x + 6, [x, 0, 100])")}var r;for(r=o;r<=a;r+=plotRangeInc)t.push([r,math.eval(e.replace(new RegExp(n,"g"),String(r.toPrecision(10))))]);return t}function arrayToPlot(){let e,n,t,o=[];var a;if(e=arguments[0],n=arguments[1],t=arguments[2],1==t){for(noFill(),beginShape(),a=0;a<e.length;a++)o.push(n.mainLayer.valueToPlot(e[a][0],e[a][1])),curveVertex.apply(this,o[a]);endShape()}else for(a=0;a<e.length;a++)o.push(new GPoint(e[a][0],e[a][1])),n.addPoint(o[a]),a>=1&&n.drawLine(o[a-1],o[a])}function plotFunction(){let e,n,t,o,a,r,i,l,p=[];var u;if(e=arguments[0],n=arguments[1][0],t=arguments[1][1],o=arguments[1][2],a=arguments[1][3],i=arguments[2],l=arguments[3],r=functionToArray(e,[n,t,o,a]),1==l){for(noFill(),beginShape(),u=0;u<r.length;u++)p.push(i.mainLayer.valueToPlot(r[u][0],r[u][1])),curveVertex.apply(this,p[u]);endShape()}else for(u=0;u<r.length;u++)p.push(new GPoint(r[u][0],r[u][1])),i.addPoint(p[u]),u>=1&&i.drawLine(p[u-1],p[u])}