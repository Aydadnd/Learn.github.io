let flashDrum = [[25.3231031543052, 52.80136402387042],[25.861892583120206, 49.02983802216539],[27.20886615515772, 45.52770673486786],[28.82523444160273, 42.56436487638534],[30.710997442455245, 40.13981244671782],[32.86615515771526, 37.7152600170503],[35.290707587382784, 35.56010230179028],[37.9846547314578, 33.135549872122766],[40.67860187553283, 31.24978687127025],[43.372549019607845, 29.63341858482523],[46.33589087809037, 28.017050298380223],[49.29923273657289, 26.670076726342714],[53.34015345268543, 25.0537084398977],[56.84228473998295, 23.976129582267692],[60.34441602728048, 22.62915601023018],[64.65473145780051, 21.55157715260017],[68.15686274509804, 20.743393009377666],[71.92838874680308, 19.665814151747657],[76.2387041773231, 19.127024722932653],[80.81841432225065, 18.85763000852515],[84.85933503836317, 18.58823529411765],[88.90025575447571, 18.049445865302644],[94.28815004262574, 17.78005115089514],[98.86786018755329, 17.78005115089514],[103.44757033248082, 17.78005115089514],[107.48849104859336, 18.04944586530264],[111.26001705029839, 18.58823529411765],[115.03154305200341, 19.12702472293265],[118.80306905370844, 19.66581415174765],[122.57459505541348, 20.20460358056266],[126.34612105711851, 20.47399829497016],[129.84825234441604, 21.55157715260017],[133.08098891730606, 22.62915601023018],[136.58312020460357, 23.70673486786018],[139.81585677749362, 24.51491901108269],[143.58738277919863, 26.13128729752771],[147.62830349531117, 28.01705029838022],[151.9386189258312, 29.902813299232736],[155.44075021312875, 32.32736572890025],[158.40409207161127, 34.75191815856777],[162.1756180733163, 37.4458653026428],[164.60017050298381, 40.67860187553283],[166.75532821824382, 43.91133844842285],[167.83290707587383, 46.87468030690537],[168.64109121909635, 50.3768115942029],[168.91048593350385, 56.84228473998295],[168.91048593350385, 269.1253196930946],[168.10230179028133, 272.8968456947996],[166.48593350383632, 276.9377664109122],[164.33077578857632, 279.9011082693947],[161.6368286445013, 282.86445012787726],[159.21227621483376, 285.5583972719523],[155.97953964194375, 287.9829497016198],[152.4774083546462, 290.1381074168798],[148.97527706734869, 292.5626598465473],[145.20375106564364, 294.4484228473998],[140.8934356351236, 296.06479113384484],[136.8525149190111, 297.6811594202899],[132.27280477408357, 299.0281329923273],[128.23188405797103, 300.1057118499574],[123.92156862745098, 301.1832907075874],[118.26427962489345, 301.9914748508099],[113.6845694799659, 302.7996589940324],[108.56606990622336, 303.3384484228474],[103.98635976129583, 303.8772378516624],[98.86786018755329, 303.8772378516624],[93.47996589940324, 303.6078431372549],[88.3614663256607, 303.6078431372549],[83.24296675191816, 303.3384484228474],[79.74083546462063, 303.0690537084399],[75.4305200341006, 302.26086956521743],[71.12020460358056, 301.9914748508099],[67.34867860187553, 300.9138959931799],[63.307757885763, 299.2975277067349],[58.99744245524297, 298.21994884910487],[55.22591645353794, 296.8729752770674],[51.993179880647915, 295.2566069906223],[47.952259164535384, 293.9096334185848],[44.450127877237854, 291.4850809889173],[40.947996589940324, 289.5993179880648],[37.7152600170503, 287.17476555839727],[33.94373401534527, 284.75021312872974],[31.788576300085253, 282.3256606990622],[30.17220801364024, 280.70929241261723],[28.82523444160273, 278.5541346973572],[27.47826086956522, 275.5907928388747],[26.13128729752771, 272.62745098039215],[25.592497868712705, 268.8559249786871],[25.592497868712705, 264.2762148337596],[25.592497868712705, 56.57289002557545],[25.3231031543052, 52.80136402387042],[25.861892583120206, 49.02983802216539],[27.20886615515772, 45.52770673486786],[28.82523444160273, 42.56436487638534],[30.710997442455245, 40.13981244671782],[32.86615515771526, 37.7152600170503],[35.290707587382784, 35.56010230179028],[37.9846547314578, 33.135549872122766],[40.67860187553283, 31.24978687127025],[43.372549019607845, 29.63341858482523],[46.33589087809037, 28.017050298380223],[49.29923273657289, 26.670076726342714],[53.34015345268543, 25.0537084398977],[56.84228473998295, 23.976129582267692],[60.34441602728048, 22.62915601023018],[64.65473145780051, 21.55157715260017],[68.15686274509804, 20.743393009377666],[71.92838874680308, 19.665814151747657],[76.2387041773231, 19.127024722932653],[80.81841432225065, 18.85763000852515],[84.85933503836317, 18.58823529411765],[88.90025575447571, 18.049445865302644],[94.28815004262574, 17.78005115089514],[98.86786018755329, 17.78005115089514],[103.44757033248082, 17.78005115089514],[107.48849104859336, 18.04944586530264],[111.26001705029839, 18.58823529411765],[115.03154305200341, 19.12702472293265],[118.80306905370844, 19.66581415174765],[122.57459505541348, 20.20460358056266],[126.34612105711851, 20.47399829497016],[129.84825234441604, 21.55157715260017],[133.08098891730606, 22.62915601023018],[136.58312020460357, 23.70673486786018],[139.81585677749362, 24.51491901108269],[143.58738277919863, 26.13128729752771],[147.62830349531117, 28.01705029838022],[151.9386189258312, 29.902813299232736],[155.44075021312875, 32.32736572890025],[158.40409207161127, 34.75191815856777],[162.1756180733163, 37.4458653026428],[164.60017050298381, 40.67860187553283],[166.75532821824382, 43.91133844842285],[167.83290707587383, 46.87468030690537],[168.64109121909635, 50.3768115942029],[168.91048593350385, 56.84228473998295],[168.91048593350385, 269.1253196930946],[168.10230179028133, 272.8968456947996],[166.48593350383632, 276.9377664109122],[164.33077578857632, 279.9011082693947],[161.6368286445013, 282.86445012787726],[159.21227621483376, 285.5583972719523],[155.97953964194375, 287.9829497016198],[152.4774083546462, 290.1381074168798],[148.97527706734869, 292.5626598465473],[145.20375106564364, 294.4484228473998],[140.8934356351236, 296.06479113384484],[136.8525149190111, 297.6811594202899],[132.27280477408357, 299.0281329923273],[128.23188405797103, 300.1057118499574],[123.92156862745098, 301.1832907075874],[118.26427962489345, 301.9914748508099],[113.6845694799659, 302.7996589940324],[108.56606990622336, 303.3384484228474],[103.98635976129583, 303.8772378516624],[98.86786018755329, 303.8772378516624],[93.47996589940324, 303.6078431372549],[88.3614663256607, 303.6078431372549],[83.24296675191816, 303.3384484228474],[79.74083546462063, 303.0690537084399],[75.4305200341006, 302.26086956521743],[71.12020460358056, 301.9914748508099],[67.34867860187553, 300.9138959931799],[63.307757885763, 299.2975277067349],[58.99744245524297, 298.21994884910487],[55.22591645353794, 296.8729752770674],[51.993179880647915, 295.2566069906223],[47.952259164535384, 293.9096334185848],[44.450127877237854, 291.4850809889173],[40.947996589940324, 289.5993179880648],[37.7152600170503, 287.17476555839727],[33.94373401534527, 284.75021312872974],[31.788576300085253, 282.3256606990622],[30.17220801364024, 280.70929241261723],[28.82523444160273, 278.5541346973572],[27.47826086956522, 275.5907928388747],[26.13128729752771, 272.62745098039215],[25.592497868712705, 268.8559249786871],[25.592497868712705, 264.2762148337596],[25.592497868712705, 56.57289002557545]];

// Overall graph shape and graphic on the right
function frame(){
    // Graph edges and axis labels
    push();
    fill(250);
    rect(80,40,320,320);

    // X-axis label
    fill(0); textSize(18); noStroke();
    text('solute/(solute-free liquid)',g.lx+30,g.by+45);
    text('(ppm)',g.lx+250,g.by+45);
    textStyle(ITALIC);
    text('x',g.lx+234,g.by+45);

    // Y-axis label
    translate(25,height/2+110);
    rotate(radians(-90));
    text('y',192,0);
    textStyle(NORMAL);
    text('solute/(solute-free gas)',0,0);
    text('(ppm)',208,0);
    pop();

    // Figure on the right constant elements (column, arrows, and lines)
    let ml; // Mid line of column to make drawing arrows and such easier
    if(!g.show5){
        push();
        translate(0,-10);
        // Column shape
        push();
        strokeWeight(2); fill(250); beginShape();
        for(let i = 0; i < flashDrum.length; i++){
            vertex(435+1.2*flashDrum[i][0],100+.7*flashDrum[i][1]);
        }
        endShape();
        pop();
        ml = 550;
        let top = 117;
        let bottom = 308;
        let dy = 55;
        let dx = 130;

        // Lines and Arrows \\

        // Blue lines
        push();
        strokeWeight(2); stroke(g.blue);
        line(ml+50,top-dy,ml+50,top-5); // Top V
        line(ml+50,top-dy,ml+dx,top-dy); // Top H
        arrow([ml+50,top-dy],[ml+50,top],g.blue,17,5);

        line(ml+50,bottom,ml+50,bottom+dy); // Bottom V
        line(ml+50,bottom+dy,ml+dx-5,bottom+dy); // Bottom H
        arrow([ml+50,bottom+dy],[ml+dx,bottom+dy],g.blue,17,5);

        // Green lines
        stroke(g.green);
        line(ml-50,top-dy,ml-50,top); // Top V
        line(ml-50,top-dy,ml-dx+5,top-dy); // Top H
        arrow([ml-50,top-dy],[ml-dx,top-dy],g.green,17,5);

        line(ml-50,bottom+5,ml-50,bottom+dy); // Bottom V
        line(ml-50,bottom+dy,ml-dx+5,bottom+dy); // Bottom H
        arrow([ml-50,bottom+dy],[ml-50,bottom],g.green,17,5);
        pop();
        pop();

        //\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\
        //\\ THESE WILL NEED TO BE EDITED ONCE STAGES ARE BEING COUNTED PROPERLY //\\
        //\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\

        // Constant text elements \\
        if(!g.LVmin){
            // upper right
            push();
            fill(250); noStroke();
            rect(ml+28,top-54,105,20);
            textSize(16); fill(g.blue);
            text('liquid solvent feed',ml+2,top-92);
            text(' = 100 Mmol/h',ml+28,top-72);
            text(' = '+g.x0+' ppm',ml+45,top-40);
            textStyle(ITALIC);
            text('x',ml+30,top-40);
            text('L',ml+17,top-72);
            textStyle(NORMAL); textSize(14);
            text('0',ml+40,top-36);
            pop();

            // lower right
            push();
            fill(250); noStroke();
            rect(ml+28,bottom+15,105,21);
            textSize(16); fill(g.blue);
            text(' = '+g.xN+' ppm',ml+45,bottom+30);
            textStyle(ITALIC);
            text('x',ml+30,bottom+30);
            textSize(14); textStyle(NORMAL);
            text(g.stagesCount,ml+40,bottom+34);
            pop();

            // lower left
            push();
            fill(250); noStroke();
            rect(ml-125,bottom+20,110,21);
            textSize(16); fill(g.green);
            text('= 1 Mmol/h',ml-105,bottom+86);
            text('gas feed',ml-120,bottom+65);
            text(' = '+g.yN1.toFixed(1)+' ppm',ml-100,bottom+35);
            textStyle(ITALIC);
            text('V',ml-120,bottom+86);
            text('y',ml-120,bottom+35);
            textStyle(NORMAL); textSize(14);
            text(g.stagesCount+1,ml-110,bottom+39);
            pop();

            // upper left
            push();
            fill(250); noStroke();
            rect(ml-132,top-54,105,20);
            textSize(16); fill(g.green);
            text('= '+g.y1.toFixed(1)+' ppm',ml-110,top-40);
            textStyle(ITALIC); 
            text('y',ml-129,top-40);
            textStyle(NORMAL); textSize(14);
            text('1',ml-120,top-36);
            pop();
        } 

        // Graph axes ticks \\
        // x-axis
        let ticks, count, xLabels, yLabels;
        if(g.x0 == .1){
            xLabels = [0,0.02,.04,.06,.08,.1];
            ticks = 4;
            count = .11/.005;
            g.maxX = .11;
            for(let i = 0; i < count; i++){
                if(i%ticks == 0){
                    line(g.lx+(g.rx-g.lx)/count*i,g.by,g.lx+(g.rx-g.lx)/count*i,g.by-5);
                    line(g.lx+(g.rx-g.lx)/count*i,g.ty,g.lx+(g.rx-g.lx)/count*i,g.ty+5);
                    push();
                    noStroke(); textSize(14);
                    if(i == 0){
                        text(xLabels[i/ticks].toFixed(2),g.lx+(g.rx-g.lx)/count*i-15,g.by+16);
                    } else {
                        text(xLabels[i/ticks].toFixed(2),g.lx+(g.rx-g.lx)/count*i-15,g.by+15);
                    }
                    pop();
                } else {
                    line(g.lx+(g.rx-g.lx)/count*i,g.by,g.lx+(g.rx-g.lx)/count*i,g.by-3);
                    line(g.lx+(g.rx-g.lx)/count*i,g.ty,g.lx+(g.rx-g.lx)/count*i,g.ty+3);
                }
            }
        } else if(g.x0 < .4){
            xLabels = [0,.05,.1,.15,.2,.25,.3,.35,.4];
            ticks = 5;
            count = g.maxX/.01;
            for(let i = 0; i < count; i++){
                if(i%ticks == 0){
                    line(g.lx+(g.rx-g.lx)/count*i,g.by,g.lx+(g.rx-g.lx)/count*i,g.by-5);
                    line(g.lx+(g.rx-g.lx)/count*i,g.ty,g.lx+(g.rx-g.lx)/count*i,g.ty+5);
                    push();
                    noStroke(); textSize(14);
                    if(i == 0){
                        text(xLabels[i/ticks].toFixed(2),g.lx+(g.rx-g.lx)/count*i-15,g.by+16);
                    } else {
                        text(xLabels[i/ticks].toFixed(2),g.lx+(g.rx-g.lx)/count*i-15,g.by+15);
                    }
                    pop();
                } else {
                    line(g.lx+(g.rx-g.lx)/count*i,g.by,g.lx+(g.rx-g.lx)/count*i,g.by-3);
                    line(g.lx+(g.rx-g.lx)/count*i,g.ty,g.lx+(g.rx-g.lx)/count*i,g.ty+3);
                }
            }
        } else {
            xLabels = [0,.1,.2,.3,.4,.5];
            ticks = 5;
            count = g.maxX/.02;
            for(let i = 0; i < count; i++){
                if(i%ticks == 0){
                    line(g.lx+(g.rx-g.lx)/count*i,g.by,g.lx+(g.rx-g.lx)/count*i,g.by-5);
                    line(g.lx+(g.rx-g.lx)/count*i,g.ty,g.lx+(g.rx-g.lx)/count*i,g.ty+5);
                    push();
                    noStroke(); textSize(14);
                    if(i == 0){
                        text(xLabels[i/ticks].toFixed(1),g.lx+(g.rx-g.lx)/count*i-10,g.by+16);
                    } else {
                        text(xLabels[i/ticks].toFixed(1),g.lx+(g.rx-g.lx)/count*i-10,g.by+15);
                    }
                    pop();
                } else {
                    line(g.lx+(g.rx-g.lx)/count*i,g.by,g.lx+(g.rx-g.lx)/count*i,g.by-3);
                    line(g.lx+(g.rx-g.lx)/count*i,g.ty,g.lx+(g.rx-g.lx)/count*i,g.ty+3);
                }
            }
        }

        // y-axis
        if(g.maxY < 1){

        } else if (g.maxY < 40){
            ticks = 5;
            count = g.maxY/1;
            yLabels = [0,5,10,15,20,25,30,35,40];
            for(let i = 0; i < count; i++){
                if(i%ticks == 0){
                    line(g.lx,g.by-(g.by-g.ty)/count*i,g.lx+5,g.by-(g.by-g.ty)/count*i);
                    line(g.rx,g.by-(g.by-g.ty)/count*i,g.rx-5,g.by-(g.by-g.ty)/count*i);
                    push();
                    noStroke(); textSize(14);
                    if(i == 0 || i == 5){
                        text(yLabels[i/ticks],g.lx-12,g.by-(g.by-g.ty)/count*i+4);
                    } else {
                        text(yLabels[i/ticks],g.lx-20,g.by-(g.by-g.ty)/count*i+4);
                    }
                    pop();
                } else {
                    line(g.lx,g.by-(g.by-g.ty)/count*i,g.lx+3,g.by-(g.by-g.ty)/count*i);
                    line(g.rx,g.by-(g.by-g.ty)/count*i,g.rx-3,g.by-(g.by-g.ty)/count*i);
                }
            }
        }
    }
}

function lineDraw(){

    let x1, y1, x2, y2;
    
    // Operating line
    x1 = g.lx;
    y1 = map(yop(0),0,g.maxY,g.by,g.ty);
    x2 = g.rx;
    y2 = map(yop(g.maxX),0,g.maxY,g.by,g.ty);

    g.R[0] = (y2 - y1)/(x2 - x1);
    g.R[1] = y1 - g.R[0]*x1;
    

    if(y1 > g.by){
        x1 = (g.by-g.R[1])/g.R[0];
        y1 = g.by;
    }

    if(y2 < g.ty){
        x2 = (g.ty-g.R[1])/g.R[0];
        y2 = g.ty;
    }
    push();
    strokeWeight(2); stroke(g.pink);
    line(x1,y1,x2,y2);

    x1 = g.lx; x2 = g.rx;

    // Equilibrium line
    y1 = map(yeq(0),0,g.maxY,g.by,g.ty);
    y2 = map(yeq(g.maxX),0,g.maxY,g.by,g.ty);
    g.L[0] = (y2 - y1)/(x2 - x1);
    g.L[1] = y1 - g.L[0]*x1;
    
    if(y2 < g.ty){
        x2 = (g.ty-g.L[1])/g.L[0];
        y2 = g.ty;
    }
    
    stroke(g.orange);
    line(x1,y1,x2,y2);
    pop();


}

function show5Display(){

}

function graphLims(){
    g.y1 = 100*(g.x0-g.xN) + g.yN1;

    g.maxX = 1.1*g.x0;
    g.maxY = 1.1*g.y1;
}

// For creating arrows
function arrow(base,tip,color,arrowLength,arrowWidth){ 
    // base = [x,y] tip = [x,y]
    // let arrowLength = 20; // Length of arrow
    // let arrowWidth = 5; // width of arrow (1/2)
    let dx, dy, mag;
    let u_hat, u_perp;
    let point = new Array(2); // Point along unit vector that is base of triangle
    let vert = new Array(6); // Holds vertices of arrow
    // Need to define a unit vector
    dx = tip[0] - base[0];
    dy = tip[1] - base[1];
    mag = (dx**2 + dy**2)**(1/2);
    u_hat = [dx/mag,dy/mag];
    vert[0] = tip[0] - 2*u_hat[0]; // Shifts the arrow back some to keep the tip from going out too far
    vert[1] = tip[1] - 2*u_hat[1];
    // Perpendicular unit vector
    u_perp = [-u_hat[1],u_hat[0]];
    // Base of arrow
    point[0] = vert[0]+ -arrowLength*u_hat[0];
    point[1] = vert[1]+ -arrowLength*u_hat[1];
    
    vert[2] = point[0] + u_perp[0]*arrowWidth;
    vert[3] = point[1] + u_perp[1]*arrowWidth;
    vert[4] = point[0] + -u_perp[0]*arrowWidth;
    vert[5] = point[1] + -u_perp[1]*arrowWidth;
    push();
    stroke(color); fill(color); strokeWeight(1);
    triangle(vert[0],vert[1],vert[2],vert[3],vert[4],vert[5]);
    pop();
  
}

// Equation functions
function HB(){
    return(g.H0*Math.E**((-5000/8.314)*(1/(g.T+273)-1/298)));
}

function yeq(x){
    return(HB()*x/g.P);
}

function yop(x){
    return(100*(x-g.x0)+g.y1);
}